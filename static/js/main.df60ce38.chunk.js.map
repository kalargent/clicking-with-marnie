{"version":3,"sources":["components/Wrapper/index.js","components/Cards/index.js","components/Footer/index.js","components/Scores/index.js","components/Jumbotron/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Cards","onClick","console","log","selectImg","id","shuffle","alt","name","src","image","Footer","Scores","score","topscore","Jumbotron","App","state","pics","selected","setState","sort","a","b","Math","random","indexOf","push","newScore","alert","this","map","pic","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4nwBAMeA,MAJf,SAAiBC,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAME,W,MCiB1BC,MAjBf,SAAeH,GACb,OACE,yBACEC,UAAU,OACVG,QAAS,WACPC,QAAQC,IAAI,qBACZN,EAAMO,UAAUP,EAAMQ,IACtBR,EAAMS,QAAQT,EAAMQ,MAGtB,yBAAKP,UAAU,iBACb,yBAAKS,IAAKV,EAAMW,KAAMC,IAAKZ,EAAMa,W,MCC1BC,MAZf,WACE,OACE,4BAAQb,UAAU,eAChB,yBAAKA,UAAU,aACb,2BACE,4E,MCaKc,MAlBf,SAAgBf,GACd,OACE,yBAAKC,UAAU,eACb,sCACA,0BAAMA,UAAU,iBAAhB,UACW,8BAAOD,EAAMgB,QAGxB,6BAEA,0BAAMf,UAAU,aAAhB,cACe,8BAAOD,EAAMiB,a,MCCnBC,MAXf,WACE,OACE,yBAAKjB,UAAU,cACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,gBAAe,yDAC7B,uBAAGA,UAAU,iBAAgB,wH,OCoGtBkB,G,iNAjGbC,MAAQ,CACNC,OACAC,SAAU,GACVN,MAAO,EACPC,SAAU,G,EAIZR,QAAU,SAAAD,GACR,EAAKe,SAAS,CACZF,KAAM,EAAKD,MAAMC,KAAKG,KAAK,SAASC,EAAGC,GACrC,MAAO,GAAMC,KAAKC,c,EAOxBrB,UAAY,SAAAC,GAEVH,QAAQC,IAAIE,EAAK,gBACjB,IAAIc,EAAW,EAAKF,MAAME,SAG1B,IAA8B,IAA1BA,EAASO,QAAQrB,IAAc,EAAKY,MAAMJ,MAAQ,GAAI,CAGtDM,EAASQ,KAAKtB,GACd,IAAIuB,EAAW,EAAKX,MAAMJ,MAAQ,EACpC,EAAKO,SAAS,CACZD,SAAUA,EACVN,MAAOe,EACPd,SAAUc,EAAW,EAAKX,MAAMH,SAAWc,EAAW,EAAKX,MAAMH,WAElD,KAAbc,IACF,EAAKR,SAAS,CACZP,MAAO,EACPM,SAAU,KAEZU,MAAM,8BAaR,EAAKT,SAAS,CACZP,MAAO,EACPM,SAAU,KAEZU,MAAM,wBAER3B,QAAQC,IAAIgB,I,wEAIJ,IAAD,OACP,OACE,kBAAC,EAAD,KACE,yBAAKrB,UAAU,aACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,kBAAC,EAAD,CACEe,MAAOiB,KAAKb,MAAMJ,MAClBC,SAAUgB,KAAKb,MAAMH,YAIzB,yBAAKhB,UAAU,UACZgC,KAAKb,MAAMC,KAAKa,IAAI,SAAAC,GAAG,OACtB,kBAAC,EAAD,CACE3B,GAAI2B,EAAI3B,GACR4B,IAAKD,EAAI3B,GACTK,MAAOsB,EAAItB,MACXJ,QAAS,EAAKA,QACdF,UAAW,EAAKA,iBAO1B,kBAAC,EAAD,W,GA7FU8B,IAAMC,YCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.df60ce38.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Cards(props) {\n  return (\n    <div\n      className=\"card\"\n      onClick={() => {\n        console.log(\"i clicked octocat\");\n        props.selectImg(props.id);\n        props.shuffle(props.id);\n      }}\n    >\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n    </div>\n  );\n}\n\nexport default Cards;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"page-footer\">\n      <div className=\"container\">\n        <b>\n          <center>Copyright Â© 2019 by Karen Largent</center>\n        </b>\n      </div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport \"./style.css\"; \n\nfunction Scores(props) {\n  return (\n    <div className=\"score-panel\">\n      <h4>Scores</h4>\n      <span className=\"current-score\">\n          Score: <span>{props.score}</span>\n          \n      </span>\n      <br></br>\n      \n      <span className=\"top-score\">\n          Top Score: <span>{props.topscore}</span>\n          \n      </span>\n    </div>\n  );\n}\n\nexport default Scores;\n","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction Jumbotron() {\n  return (\n    <div className=\"card-panel\">\n      <div className=\"container\">\n        <h3 className=\"jumbo-header\"><center>Octocat Memory Game!</center></h3>\n        <p className=\"jumbo-content\"><center>Click on an Octocat to earn points, but don't click on any image more than once!</center></p>\n      </div>\n    </div>\n  );\n}\n\nexport default Jumbotron; \n","import React from \"react\";\nimport Wrapper from \"./components/Wrapper\";\n// import Navbar from \"./components/Navbar\";\nimport Cards from \"./components/Cards\";\nimport Footer from \"./components/Footer\";\nimport Scores from \"./components/Scores\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport pics from \"./pics.json\";\nimport \"./App.css\"; \n\nclass App extends React.Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    pics,\n    selected: [],\n    score: 0,\n    topscore: 0\n  };\n\n  // SHUFFLE CARDS ON CLICK\n  shuffle = id => {\n    this.setState({\n      pics: this.state.pics.sort(function(a, b) {\n        return 0.5 - Math.random();\n      })\n    });\n  };\n\n  // ADD AN ITEM TO A LIST OF SELECTED ITEMS\n  // start a function called selected items\n  selectImg = id => {\n    // console.log to make sure it is being accessed\n    console.log(id + \" was clicked\");\n    let selected = this.state.selected;\n\n    // check if selected image id is already in an array on the state\n    if (selected.indexOf(id) === -1 && this.state.score < 12) {\n        // if it's not, then increment the score state\n        // compare that state to the top score to see if that needs to be updated\n        selected.push(id); \n        var newScore = this.state.score + 1; \n      this.setState({\n        selected: selected, \n        score: newScore,\n        topscore: newScore > this.state.topscore ? newScore : this.state.topscore\n      })\n      if (newScore === 12) {\n        this.setState({\n          score: 0,\n          selected: [],\n        })\n        alert(\"You Win! Play Again!\");\n      }\n    } \n    // else if (this.state.score === 12) {\n    //   this.setState({\n    //     score: 0,\n    //     selected: [],\n    //   })\n    //   alert(\"You Win! Play Again!\");\n\n    // }\n    // if it is in the array, reset the game\n    else {\n      this.setState({\n        score: 0,\n        selected: [],\n      })\n      alert(\"You Lose, Try Again!\");\n    }\n    console.log(selected); \n  };\n\n  // Map over this.state.pics and render a Card component for each pic object\n  render() {\n    return (\n      <Wrapper>\n        <div className=\"container\">\n          <div className=\"row\">\n            <Jumbotron />\n          </div>\n          <div className=\"row\">\n            <div className=\"col s3\">\n              <Scores \n                score={this.state.score}\n                topscore={this.state.topscore}\n              />\n            </div>\n\n            <div className=\"col s9\">\n              {this.state.pics.map(pic => (\n                <Cards\n                  id={pic.id}\n                  key={pic.id}\n                  image={pic.image}\n                  shuffle={this.shuffle}\n                  selectImg={this.selectImg}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <Footer />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'; \n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}